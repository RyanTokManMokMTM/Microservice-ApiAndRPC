# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. 
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.     
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.  
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]

  # 我们自己的商城项目配置
  - job_name: 'My_mall'
    static_configs:
      # Target Data Address

      #api service
      - targets: ['golang:9080']
        labels: # custom labels
            app: "user-api"
            env: "test"

      - targets: ['golang:9081']
        labels: # custom labels
          app: "product-api"
          env: "test"

      - targets: ['golang:9082']
        labels: # custom labels
          app: "pay-api"
          env: "test"

      - targets: ['golang:9083']
        labels: # custom labels
          app: "order-api"
          env: "test"

      #RPC Service
      - targets: ['golang:9090']
        labels: # custom labels
          app: "order-rpc"
          env: "test"

      - targets: ['golang:9091']
        labels: # custom labels
          app: "product-rpc"
          env: "test"

      - targets: ['golang:9092']
        labels: # custom labels
          app: "pay-rpc"
          env: "test"

      - targets: ['golang:9093']
        labels: # custom labels
          app: "order-rpc"
          env: "test"
